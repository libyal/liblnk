environment:
  pypi_token:
    secure: VHuZiUWgTqTciKE2nsv/LnOzyM4uRdrNKBIdRDMmLDusmU2artgxHGP07emAy+w4uqx0yIn6p2YpJz6Kk9VaNyY92bNcH6XfudcwiiHNx5YodywIlLablGAwO85gHT5Acr7rJVvBErJcex8mM+bfkiLQTTXQlMBT3q2PtGwhImCGWRzdE08qJLfzEjcrgrYrpWcYntto6MTsLHI8OB+Pij8Ha2kHuw1kEb0VUzDasfi+gMTquzev4L3mOW3wbnPBdWzW5h3TWb7rcGrpMXiXRg==
  matrix:
  - TARGET: python37-x64
    BUILD_ENVIRONMENT: python
    PYTHON: "C:\\Python37-x64"
  - TARGET: python37-x64
    BUILD_ENVIRONMENT: python
    APPVEYOR_BUILD_WORKER_IMAGE: macOS-Mojave

stack: python 3.7

install:
- cmd: git clone https://github.com/codecov/codecov-bash.git ..\codecov-bash
- cmd: if [%BUILD_ENVIRONMENT%]==[msbuild] (
    git clone https://github.com/libyal/vstools.git ..\vstools )
- cmd: if [%BUILD_ENVIRONMENT%]==[python] (
    "%PYTHON%\\python.exe" -m pip install -U pip setuptools twine wheel )
- sh: if test ${BUILD_ENVIRONMENT} = "python"; then python --version; python -m pip install -U pip setuptools twine wheel; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin] (
    C:\cygwin\setup-x86.exe -qgnNdO -l C:\cygwin\var\cache\setup -R c:\cygwin -s http://cygwin.mirror.constant.com -P python2-devel -P python3-devel )
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\setup-x86_64.exe -qgnNdO -l C:\cygwin64\var\cache\setup -R c:\cygwin64 -s http://cygwin.mirror.constant.com -P python2-devel -P python3-devel )

build_script:
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild" -or $env:BUILD_ENVIRONMENT -eq "python") {
    .\synclibs.ps1;
    .\autogen.ps1 }
- cmd: if [%TARGET%]==[vs2008] (
    msbuild /verbosity:quiet msvscpp\liblnk.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%TARGET%]==[vs2010] (
    set PYTHONPATH=..\vstools &&
    C:\Python27\python.exe ..\vstools\scripts\msvscpp-convert.py --no-python-dll --output-format 2010 msvscpp\liblnk.sln &&
    msbuild /verbosity:quiet vs2010\liblnk.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%TARGET%]==[vs2012] (
    set PYTHONPATH=..\vstools &&
    C:\Python27\python.exe ..\vstools\scripts\msvscpp-convert.py --extend-with-x64 --output-format 2012 --python-path "C:\\Python27-x64" msvscpp\liblnk.sln &&
    msbuild /verbosity:quiet vs2012\liblnk.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%TARGET%]==[vs2013] (
    set PYTHONPATH=..\vstools &&
    C:\Python27\python.exe ..\vstools\scripts\msvscpp-convert.py --output-format 2013 msvscpp\liblnk.sln &&
    msbuild /verbosity:quiet vs2013\liblnk.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%TARGET%]==[vs2015] (
    set PYTHONPATH=..\vstools &&
    C:\Python27\python.exe ..\vstools\scripts\msvscpp-convert.py --output-format 2015 msvscpp\liblnk.sln &&
    msbuild /verbosity:quiet vs2015\liblnk.sln /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%TARGET%]==[vs2017] (
    set PYTHONPATH=..\vstools &&
    C:\Python27\python.exe ..\vstools\scripts\msvscpp-convert.py --extend-with-x64 --no-python-dll --output-format 2017 --with-dokany msvscpp\liblnk.sln &&
    msbuild /verbosity:quiet vs2017\liblnk.sln /property:Platform=Win32 /property:PlatformToolset=v141 /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" &&
    msbuild /verbosity:quiet vs2017\liblnk.sln /property:Platform=x64 /property:PlatformToolset=v141 /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" )
- cmd: if [%BUILD_ENVIRONMENT%]==[python] (
    "%PYTHON%\\python.exe" setup.py bdist_msi bdist_wheel )
- sh: if test ${BUILD_ENVIRONMENT} = "python"; then python setup.py bdist_wheel; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin] (
    xcopy /i /q /s C:\projects\liblnk C:\cygwin\home\appveyor\liblnk &&
    C:\cygwin\bin\bash -e -l -c "cd liblnk && ./synclibs.sh --use-head && ./autogen.sh" )
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    xcopy /i /q /s C:\projects\liblnk C:\cygwin64\home\appveyor\liblnk &&
    C:\cygwin64\bin\bash -e -l -c "cd liblnk && ./synclibs.sh --use-head && ./autogen.sh" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw] (
    xcopy /i /q /s C:\projects\liblnk C:\MinGW\msys\1.0\home\appveyor\liblnk &&
    C:\MinGW\msys\1.0\bin\bash -e -l -c "cd liblnk && sed 's/@VERSION@/0.29/g' m4/pkg.m4.in > m4/pkg.m4 && ./synclibs.sh --use-head && ./autogen.sh" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    xcopy /i /q /s C:\projects\liblnk C:\msys64\home\appveyor\liblnk &&
    C:\msys64\usr\bin\bash -e -l -c "cd liblnk && ./synclibs.sh --use-head && ./autogen.sh" )

test_script:
- cmd: rem Run tests
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild") {
    .\runtests.ps1 }
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin] (
    C:\cygwin\bin\bash -l -c "cd liblnk && ./configure ${CONFIGURE_OPTIONS} && make > /dev/null && make check CHECK_WITH_STDERR=1; RESULT=$?; if test ${RESULT} -ne 0 && test -f tests/test-suite.log; then cat tests/test-suite.log; fi; exit ${RESULT};" )
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\bin\bash -l -c "cd liblnk && ./configure ${CONFIGURE_OPTIONS} && make > /dev/null && make check CHECK_WITH_STDERR=1; RESULT=$?; if test ${RESULT} -ne 0 && test -f tests/test-suite.log; then cat tests/test-suite.log; fi; exit ${RESULT};" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw] (
    C:\MinGW\msys\1.0\bin\bash -l -c "cd liblnk && ./configure ${CONFIGURE_OPTIONS} && make > /dev/null && make check CHECK_WITH_STDERR=1; RESULT=$?; if test ${RESULT} -ne 0 && test -f tests/test-suite.log; then cat tests/test-suite.log; fi; exit ${RESULT};" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    C:\msys64\usr\bin\bash -l -c "cd liblnk && ./configure ${CONFIGURE_OPTIONS} && make > /dev/null && make check CHECK_WITH_STDERR=1; RESULT=$?; if test ${RESULT} -ne 0 && test -f tests/test-suite.log; then cat tests/test-suite.log; fi; exit ${RESULT};" )

after_test:
- cmd: if [%TARGET%]==[mingw-gcc-no-optimization] (
    copy C:\projects\codecov-bash\codecov C:\MinGW\msys\1.0\home\appveyor\liblnk\codecov.sh &&
    C:\MinGW\msys\1.0\bin\bash -e -l -c "cd liblnk && chmod a+x ./codecov.sh && sed -i 's/-execdir /-exec /' ./codecov.sh && ./codecov.sh -n ${TARGET} -y .codecov.yml" )

artifacts:
- path: dist\*.whl

deploy_script:
- ps: If ($env:APPVEYOR_REPO_TAG -eq "true") {
    Invoke-Expression "${env:PYTHON}\\python.exe -m twine upload dist/*.whl --username __token__ --password ${env:PYPI_TOKEN} --skip-existing" }
- sh: if test ${BUILD_ENVIRONMENT} = "python"; then python -m twine upload dist/*.whl --username __token__ --password ${PYPI_TOKEN} --skip-existing; fi

